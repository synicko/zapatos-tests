/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: shop === */

  export namespace shop {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **shop.favorite**
     * - Table in database
     */
    export namespace favorite {
      export type Table = 'shop.favorite';
      export interface Selectable {
        /**
        * **shop.favorite.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **shop.favorite.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id: number;
        /**
        * **shop.favorite.product_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        product_id: number;
      }
      export interface JSONSelectable {
        /**
        * **shop.favorite.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **shop.favorite.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id: number;
        /**
        * **shop.favorite.product_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        product_id: number;
      }
      export interface Whereable {
        /**
        * **shop.favorite.id**
        * - `int4` in database
        * - Generated column
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.favorite.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.favorite.product_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        product_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **shop.favorite.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **shop.favorite.product_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        product_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **shop.favorite.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **shop.favorite.product_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        product_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'favorite_pkey' | 'favorite_user_id_key';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **shop.order**
     * - Table in database
     */
    export namespace order {
      export type Table = 'shop.order';
      export interface Selectable {
        /**
        * **shop.order.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **shop.order.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: Date;
        /**
        * **shop.order.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id: number;
      }
      export interface JSONSelectable {
        /**
        * **shop.order.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **shop.order.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: db.TimestampTzString;
        /**
        * **shop.order.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id: number;
      }
      export interface Whereable {
        /**
        * **shop.order.id**
        * - `int4` in database
        * - Generated column
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.order.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.order.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **shop.order.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **shop.order.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **shop.order.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **shop.order.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'order_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **shop.order_item**
     * - Table in database
     */
    export namespace order_item {
      export type Table = 'shop.order_item';
      export interface Selectable {
        /**
        * **shop.order_item.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **shop.order_item.quantity**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        quantity: number;
        /**
        * **shop.order_item.order_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        order_id: number;
        /**
        * **shop.order_item.product_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        product_id: number;
      }
      export interface JSONSelectable {
        /**
        * **shop.order_item.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **shop.order_item.quantity**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        quantity: number;
        /**
        * **shop.order_item.order_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        order_id: number;
        /**
        * **shop.order_item.product_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        product_id: number;
      }
      export interface Whereable {
        /**
        * **shop.order_item.id**
        * - `int4` in database
        * - Generated column
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.order_item.quantity**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        quantity?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.order_item.order_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        order_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.order_item.product_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        product_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **shop.order_item.quantity**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        quantity: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **shop.order_item.order_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        order_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **shop.order_item.product_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        product_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **shop.order_item.quantity**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        quantity?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **shop.order_item.order_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        order_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **shop.order_item.product_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        product_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'order_item_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **shop.product**
     * - Table in database
     */
    export namespace product {
      export type Table = 'shop.product';
      export interface Selectable {
        /**
        * **shop.product.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **shop.product.description**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        description: string;
        /**
        * **shop.product.price**
        * - `float8` in database
        * - `NOT NULL`, no default
        */
        price: number;
        /**
        * **shop.product.attributes**
        * - `jsonb` in database
        * - Nullable, no default
        */
        attributes: db.JSONValue | null;
      }
      export interface JSONSelectable {
        /**
        * **shop.product.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **shop.product.description**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        description: string;
        /**
        * **shop.product.price**
        * - `float8` in database
        * - `NOT NULL`, no default
        */
        price: number;
        /**
        * **shop.product.attributes**
        * - `jsonb` in database
        * - Nullable, no default
        */
        attributes: db.JSONValue | null;
      }
      export interface Whereable {
        /**
        * **shop.product.id**
        * - `int4` in database
        * - Generated column
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.product.description**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.product.price**
        * - `float8` in database
        * - `NOT NULL`, no default
        */
        price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.product.attributes**
        * - `jsonb` in database
        * - Nullable, no default
        */
        attributes?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **shop.product.description**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        description: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **shop.product.price**
        * - `float8` in database
        * - `NOT NULL`, no default
        */
        price: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **shop.product.attributes**
        * - `jsonb` in database
        * - Nullable, no default
        */
        attributes?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **shop.product.description**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **shop.product.price**
        * - `float8` in database
        * - `NOT NULL`, no default
        */
        price?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **shop.product.attributes**
        * - `jsonb` in database
        * - Nullable, no default
        */
        attributes?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'product_description_key' | 'product_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **shop.user**
     * - Table in database
     */
    export namespace user {
      export type Table = 'shop.user';
      export interface Selectable {
        /**
        * **shop.user.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **shop.user.first_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        first_name: string;
        /**
        * **shop.user.last_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        last_name: string;
        /**
        * **shop.user.favorite_color**
        * - `color` in database
        * - Nullable, no default
        */
        favorite_color: c.PgColor | null;
      }
      export interface JSONSelectable {
        /**
        * **shop.user.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **shop.user.first_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        first_name: string;
        /**
        * **shop.user.last_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        last_name: string;
        /**
        * **shop.user.favorite_color**
        * - `color` in database
        * - Nullable, no default
        */
        favorite_color: c.PgColor | null;
      }
      export interface Whereable {
        /**
        * **shop.user.id**
        * - `int4` in database
        * - Generated column
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.user.first_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        first_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.user.last_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        last_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **shop.user.favorite_color**
        * - `color` in database
        * - Nullable, no default
        */
        favorite_color?: c.PgColor | db.Parameter<c.PgColor> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgColor | db.Parameter<c.PgColor> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **shop.user.first_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        first_name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **shop.user.last_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        last_name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **shop.user.favorite_color**
        * - `color` in database
        * - Nullable, no default
        */
        favorite_color?: c.PgColor | db.Parameter<c.PgColor> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **shop.user.first_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        first_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **shop.user.last_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        last_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **shop.user.favorite_color**
        * - `color` in database
        * - Nullable, no default
        */
        favorite_color?: c.PgColor | db.Parameter<c.PgColor> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgColor | db.Parameter<c.PgColor> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'user_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = favorite.Table | order.Table | order_item.Table | product.Table | user.Table;
    export type Selectable = favorite.Selectable | order.Selectable | order_item.Selectable | product.Selectable | user.Selectable;
    export type JSONSelectable = favorite.JSONSelectable | order.JSONSelectable | order_item.JSONSelectable | product.JSONSelectable | user.JSONSelectable;
    export type Whereable = favorite.Whereable | order.Whereable | order_item.Whereable | product.Whereable | user.Whereable;
    export type Insertable = favorite.Insertable | order.Insertable | order_item.Insertable | product.Insertable | user.Insertable;
    export type Updatable = favorite.Updatable | order.Updatable | order_item.Updatable | product.Updatable | user.Updatable;
    export type UniqueIndex = favorite.UniqueIndex | order.UniqueIndex | order_item.UniqueIndex | product.UniqueIndex | user.UniqueIndex;
    export type Column = favorite.Column | order.Column | order_item.Column | product.Column | user.Column;
  
    export type AllBaseTables = [favorite.Table, order.Table, order_item.Table, product.Table, user.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [favorite.Table, order.Table, order_item.Table, product.Table, user.Table];
  }


  /* === schema: billing === */

  export namespace billing {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
    /* (none) */
  
    /* --- aggregate types --- */
  
    // `never` rather than `any` types would be more accurate in this no-tables case, but they stop `shortcuts.ts` compiling
  
    export type Table = never;
    export type Selectable = never;
    export type JSONSelectable = never;
    export type Whereable = never;
    export type Insertable = never;
    export type Updatable = never;
    export type UniqueIndex = never;
    export type Column = never;
  
    export type AllBaseTables = [];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [];
  }


  /* === global aggregate types === */

  export type Schema = 'shop' | 'billing';
  export type Table = shop.Table | billing.Table;
  export type Selectable = shop.Selectable | billing.Selectable;
  export type JSONSelectable = shop.JSONSelectable | billing.JSONSelectable;
  export type Whereable = shop.Whereable | billing.Whereable;
  export type Insertable = shop.Insertable | billing.Insertable;
  export type Updatable = shop.Updatable | billing.Updatable;
  export type UniqueIndex = shop.UniqueIndex | billing.UniqueIndex;
  export type Column = shop.Column | billing.Column;

  export type AllSchemas = ['shop', 'billing'];
  export type AllBaseTables = [...shop.AllBaseTables, ...billing.AllBaseTables];
  export type AllForeignTables = [...shop.AllForeignTables, ...billing.AllForeignTables];
  export type AllViews = [...shop.AllViews, ...billing.AllViews];
  export type AllMaterializedViews = [...shop.AllMaterializedViews, ...billing.AllMaterializedViews];
  export type AllTablesAndViews = [...shop.AllTablesAndViews, ...billing.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "shop.favorite": shop.favorite.Selectable;
    "shop.order": shop.order.Selectable;
    "shop.order_item": shop.order_item.Selectable;
    "shop.product": shop.product.Selectable;
    "shop.user": shop.user.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "shop.favorite": shop.favorite.JSONSelectable;
    "shop.order": shop.order.JSONSelectable;
    "shop.order_item": shop.order_item.JSONSelectable;
    "shop.product": shop.product.JSONSelectable;
    "shop.user": shop.user.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "shop.favorite": shop.favorite.Whereable;
    "shop.order": shop.order.Whereable;
    "shop.order_item": shop.order_item.Whereable;
    "shop.product": shop.product.Whereable;
    "shop.user": shop.user.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "shop.favorite": shop.favorite.Insertable;
    "shop.order": shop.order.Insertable;
    "shop.order_item": shop.order_item.Insertable;
    "shop.product": shop.product.Insertable;
    "shop.user": shop.user.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "shop.favorite": shop.favorite.Updatable;
    "shop.order": shop.order.Updatable;
    "shop.order_item": shop.order_item.Updatable;
    "shop.product": shop.product.Updatable;
    "shop.user": shop.user.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "shop.favorite": shop.favorite.UniqueIndex;
    "shop.order": shop.order.UniqueIndex;
    "shop.order_item": shop.order_item.UniqueIndex;
    "shop.product": shop.product.UniqueIndex;
    "shop.user": shop.user.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "shop.favorite": shop.favorite.Column;
    "shop.order": shop.order.Column;
    "shop.order_item": shop.order_item.Column;
    "shop.product": shop.product.Column;
    "shop.user": shop.user.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "shop.favorite": shop.favorite.SQL;
    "shop.order": shop.order.SQL;
    "shop.order_item": shop.order_item.SQL;
    "shop.product": shop.product.SQL;
    "shop.user": shop.user.SQL;
  }[T];

}
